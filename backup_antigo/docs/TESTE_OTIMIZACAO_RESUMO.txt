================================================================================
üéØ teste_otimizacao.py - ATUALIZADO COM SALVAR RESULTADOS!
================================================================================

‚úÖ NOVOS RECURSOS:
   1. Processar N linhas da planilha
   2. SALVAR resultados em Excel üìä

================================================================================
üìã PAR√ÇMETROS DISPON√çVEIS
================================================================================

--linhas, -n N√öMERO
   N√∫mero de linhas da planilha para processar

--planilha, -p ARQUIVO
   Arquivo da planilha (padr√£o: materiais.xlsx)

--min-score, -s VALOR
   Score m√≠nimo de relev√¢ncia 0.0-1.0 (padr√£o: 0.3)

--buscar, -b
   Fazer busca REAL no Mercado Livre

--salvar, --saida, -o ARQUIVO.xlsx  ‚≠ê NOVO!
   Salvar resultados em planilha Excel

================================================================================
üìä COLUNAS DA PLANILHA SALVA
================================================================================

‚úÖ Nome_Original              - Termo original da planilha
‚úÖ Termo_Otimizado           - Termo otimizado para busca
‚úÖ Palavras_Chave            - Palavras-chave extra√≠das
‚úÖ Total_Produtos_Encontrados - Produtos brutos (antes do filtro)
‚úÖ Total_Produtos_Relevantes  - Produtos relevantes (ap√≥s filtro)
‚úÖ Preco_Minimo              - Menor pre√ßo encontrado
‚úÖ Preco_Maximo              - Maior pre√ßo encontrado
‚úÖ Preco_Medio               - Pre√ßo m√©dio
‚úÖ Preco_Mediana             - Pre√ßo mediano
‚úÖ Desvio_Padrao             - Desvio padr√£o dos pre√ßos
‚úÖ Outliers_Removidos        - Quantidade de outliers removidos
‚úÖ Links_Produtos_JSON       - JSON com todos os produtos e links
‚úÖ Status_Busca              - Status: sucesso, erro, apenas_otimizacao
‚úÖ Data_Hora_Busca           - Data e hora do processamento

================================================================================
üöÄ EXEMPLOS PR√ÅTICOS
================================================================================

1. TESTE VISUAL (sem planilha):
   python3 teste_otimizacao.py

2. SALVAR APENAS OTIMIZA√á√ïES (r√°pido):
   python3 teste_otimizacao.py --linhas 10 --salvar otimizacoes.xlsx

3. SALVAR COM BUSCA REAL (3 materiais):
   python3 teste_otimizacao.py --linhas 3 --buscar --salvar resultados.xlsx

4. SALVAR 20 MATERIAIS COM SCORE 0.4:
   python3 teste_otimizacao.py --linhas 20 --min-score 0.4 --buscar --salvar resultado.xlsx

5. ATALHO COMPLETO:
   python3 teste_otimizacao.py -n 10 -b -s 0.3 -o resultado.xlsx

6. ARQUIVO CUSTOMIZADO:
   python3 teste_otimizacao.py -p minha.xlsx -n 5 -b -o saida.xlsx

================================================================================
üí° DIFEREN√áA ENTRE OS MODOS
================================================================================

SEM --buscar (APENAS OTIMIZA√á√ÉO):
   ‚úÖ Instant√¢neo
   ‚úÖ Mostra como termos s√£o otimizados
   ‚úÖ Pre√ßos ficam vazios na planilha
   ‚úÖ √ötil para planejamento

   PLANILHA GERADA:
   Nome_Original: ATIVIDADES... - Kit Bolas
   Termo_Otimizado: kit bolas
   Palavras_Chave: kit, bolas
   Total_Produtos_Encontrados: (vazio)
   Total_Produtos_Relevantes: (vazio)
   Precos: (vazios)
   Status_Busca: apenas_otimizacao

COM --buscar (BUSCA REAL):
   ‚úÖ Busca no Mercado Livre
   ‚úÖ Produtos, pre√ßos, estat√≠sticas
   ‚úÖ Links de todos os produtos
   ‚úÖ ~3 segundos por material

   PLANILHA GERADA:
   Nome_Original: ATIVIDADES... - Kit Bolas
   Termo_Otimizado: kit bolas su√≠√ßas
   Palavras_Chave: kit, bolas, su√≠√ßas
   Total_Produtos_Encontrados: 25
   Total_Produtos_Relevantes: 8
   Preco_Minimo: 89.90
   Preco_Maximo: 299.90
   Preco_Medio: 149.50
   Links_Produtos_JSON: [{"nome": "...", "preco": 89.90, ...}]
   Status_Busca: sucesso

================================================================================
‚è±Ô∏è TEMPO ESTIMADO
================================================================================

10 linhas SEM buscar + salvar  ‚Üí  Instant√¢neo
5 linhas COM buscar + salvar   ‚Üí  ~15 segundos
10 linhas COM buscar + salvar  ‚Üí  ~30 segundos
20 linhas COM buscar + salvar  ‚Üí  ~1 minuto
50 linhas COM buscar + salvar  ‚Üí  ~2.5 minutos

================================================================================
üéØ FLUXO RECOMENDADO DE USO
================================================================================

PASSO 1: Teste otimiza√ß√£o r√°pida (10 materiais)
   python3 teste_otimizacao.py -n 10 -o teste_otimizacao.xlsx
   
   ‚Üí Veja como termos s√£o otimizados
   ‚Üí Identifique materiais problem√°ticos
   ‚Üí Instant√¢neo!

PASSO 2: Valide com busca real (3 materiais)
   python3 teste_otimizacao.py -n 3 -b -o teste_busca.xlsx
   
   ‚Üí Veja produtos reais encontrados
   ‚Üí Verifique relev√¢ncia
   ‚Üí ~10 segundos

PASSO 3: Ajuste score se necess√°rio
   python3 teste_otimizacao.py -n 5 -b -s 0.4 -o teste_score.xlsx
   
   ‚Üí Se muitos irrelevantes: aumente score
   ‚Üí Se poucos produtos: diminua score

PASSO 4: Processe mais materiais
   python3 teste_otimizacao.py -n 50 -b -o resultados_50.xlsx
   
   ‚Üí ~2.5 minutos
   ‚Üí Dados completos

PASSO 5: Para processar TUDO (3306 materiais)
   python3 busca_materiais_planilha_otimizado.py
   
   ‚Üí ~3-4 horas
   ‚Üí Planilha completa

================================================================================
üìä CASOS DE USO
================================================================================

CASO 1: Planejar busca (ver otimiza√ß√µes)
   python3 teste_otimizacao.py -n 20 -o planejamento.xlsx
   ‚Üí Instant√¢neo, veja otimiza√ß√µes

CASO 2: Validar resultados (poucos materiais)
   python3 teste_otimizacao.py -n 5 -b -o validacao.xlsx
   ‚Üí ~15s, veja se produtos s√£o relevantes

CASO 3: Testar diferentes scores
   python3 teste_otimizacao.py -n 5 -b -s 0.2 -o score_02.xlsx
   python3 teste_otimizacao.py -n 5 -b -s 0.4 -o score_04.xlsx
   python3 teste_otimizacao.py -n 5 -b -s 0.5 -o score_05.xlsx
   ‚Üí Compare resultados

CASO 4: Processar lote m√©dio
   python3 teste_otimizacao.py -n 100 -b -o lote_100.xlsx
   ‚Üí ~5 minutos, bom dataset

CASO 5: Apenas conferir termos
   python3 teste_otimizacao.py -n 50 -o apenas_termos.xlsx
   ‚Üí Instant√¢neo, planeje depois

================================================================================
‚öôÔ∏è AJUSTE DE SCORE
================================================================================

--min-score 0.2  ‚Üí  Menos rigoroso (mais produtos)
--min-score 0.3  ‚Üí  Padr√£o (equil√≠brio) ‚≠ê RECOMENDADO
--min-score 0.4  ‚Üí  Rigoroso (menos produtos, mais relevantes)
--min-score 0.5  ‚Üí  Muito rigoroso (apenas os melhores)

COMO DECIDIR:
1. Comece com 0.3
2. Se muitos irrelevantes ‚Üí Aumente (0.4 ou 0.5)
3. Se poucos produtos ‚Üí Diminua (0.2)

================================================================================
üìö ARQUIVOS DO SISTEMA
================================================================================

teste_otimizacao.py                    - Teste com N linhas + salvar
busca_materiais_planilha_otimizado.py  - Processar planilha completa
README_OTIMIZACAO.md                   - Documenta√ß√£o completa
RESUMO_OTIMIZACAO.txt                  - Resumo do sistema otimizado

================================================================================
‚úÖ COMANDOS QUICK START
================================================================================

# Ver ajuda completa
python3 teste_otimizacao.py --help

# Teste visual (sem planilha)
python3 teste_otimizacao.py

# Salvar 10 otimiza√ß√µes (r√°pido)
python3 teste_otimizacao.py -n 10 -o teste.xlsx

# Salvar 3 com busca real
python3 teste_otimizacao.py -n 3 -b -o teste_real.xlsx

# Salvar 20 com score 0.4
python3 teste_otimizacao.py -n 20 -b -s 0.4 -o resultado.xlsx

================================================================================
üéâ TESTE AGORA!
================================================================================

Comece com:

  # R√°pido (ver otimiza√ß√µes)
  python3 teste_otimizacao.py -n 10 -o meu_teste.xlsx

Depois:

  # Com busca real (validar)
  python3 teste_otimizacao.py -n 3 -b -o validacao.xlsx

Abra os arquivos .xlsx gerados e analise os resultados! üìä

================================================================================
